{"version":3,"sources":["json-media-type-formatter.spec.js"],"names":[],"mappings":";;AAAA,SAAS,2BAAT,EAAsC,MAAM;;AAE1C,MAAI,yBAAyB,IAA7B;;AAEA,aAAW,MAAM;AACf,6BAAyB,IAAI,KAAK,sBAAT,EAAzB;AACD,GAFD;;AAIA,YAAU,MAAM;AACd,6BAAyB,IAAzB;AACD,GAFD;;AAIA,KAAG,+BAAH,EAAoC,MAAM;AACxC,QAAI,MAAM;AACR,UAAI,EADI;AAER,YAAM;AAFE,KAAV;AAIA,QAAI,SAAS,uBAAuB,KAAvB,CAA6B,GAA7B,CAAb;AACA,WAAO,MAAP,EAAe,OAAf,CAAuB,8BAAvB;AACD,GAPD;;AASA,KAAG,qCAAH,EAA0C,MAAM;AAC9C,QAAI,MAAM;AACR,UAAI,EADI;AAER,YAAM;AAFE,KAAV;AAIA,2BAAuB,MAAvB,GAAgC,CAAhC;AACA,QAAI,SAAS,uBAAuB,KAAvB,CAA6B,GAA7B,CAAb;AACA,WAAO,MAAP,EAAe,OAAf,CAAuB,CAAC,wCAAD,CAAvB;AACD,GARD;;AAUA,KAAG,8CAAH,EAAmD,MAAM;AACvD,QAAI,UAAU,uBAAuB,KAAvB,CAA6B,IAA7B,CAAd;AACA,WAAO,OAAP,EAAgB,QAAhB;AACD,GAHD;;AAKA,KAAG,8BAAH,EAAmC,MAAM;AACvC,QAAI,UAAU,8BAAd;AACA,QAAI,MAAM,uBAAuB,IAAvB,CAA4B,OAA5B,CAAV;AACA,WAAO,GAAP,EAAY,GAAZ,CAAgB,QAAhB;AACA,WAAO,IAAI,EAAX,EAAe,OAAf,CAAuB,EAAvB;AACA,WAAO,IAAI,IAAX,EAAiB,OAAjB,CAAyB,KAAzB;AACD,GAND;;AAQA,KAAG,mCAAH,EAAwC,MAAM;AAC5C,UAAM,IAAN,CAAW;AACT,kBAAY,OAAZ,EAAqB;AACnB,aAAK,EAAL,GAAU,QAAQ,EAAlB;AACA,aAAK,IAAL,GAAY,QAAQ,IAApB;AACD;AAJQ;AAMX,QAAI,UAAU,8BAAd;AACA,QAAI,MAAM,uBAAuB,IAAvB,CAA4B,OAA5B,EAAqC,IAArC,CAAV;AACA,WAAO,GAAP,EAAY,GAAZ,CAAgB,QAAhB;AACA,WAAO,eAAe,IAAtB,EAA4B,IAA5B,CAAiC,IAAjC;AACA,WAAO,IAAI,EAAX,EAAe,OAAf,CAAuB,EAAvB;AACA,WAAO,IAAI,IAAX,EAAiB,OAAjB,CAAyB,KAAzB;AACD,GAbD;;AAeA,KAAG,+CAAH,EAAoD,MAAM;AACxD,QAAI,UAAU,uBAAuB,IAAvB,CAA4B,IAA5B,CAAd;AACA,WAAO,OAAP,EAAgB,QAAhB;AACD,GAHD;AAKD,CAhED","file":"json-media-type-formatter.spec.js","sourcesContent":["describe(\"Json media type formatter\", () => {\n\n  var jsonMediaTypeFormatter = null;\n\n  beforeEach(() => {\n    jsonMediaTypeFormatter = new rest.JsonMediaTypeFormatter();\n  });\n\n  afterEach(() => {\n    jsonMediaTypeFormatter = null;\n  });\n\n  it(\"should write object to output\", () => {\n    var obj = {\n      id: 42,\n      name: \"tom\"\n    };\n    var output = jsonMediaTypeFormatter.write(obj);\n    expect(output).toEqual(\"{\\\"id\\\":42,\\\"name\\\":\\\"tom\\\"}\");\n  });\n\n  it(\"should write to pretty print output\", () => {\n    var obj = {\n      id: 42,\n      name: \"tom\"\n    };\n    jsonMediaTypeFormatter.indent = 2;\n    var output = jsonMediaTypeFormatter.write(obj);\n    expect(output).toEqual(`{\\n  \\\"id\\\": 42,\\n  \\\"name\\\": \\\"tom\\\"\\n}`);\n  });\n\n  it(\"should return null on write if value is null\", () => {\n    var content = jsonMediaTypeFormatter.write(null);\n    expect(content).toBeNull();\n  });\n\n  it(\"should read anonymous object\", () => {\n    var content = \"{\\\"id\\\":42,\\\"name\\\":\\\"tom\\\"}\";\n    var obj = jsonMediaTypeFormatter.read(content);\n    expect(obj).not.toBeNull();\n    expect(obj.id).toEqual(42);\n    expect(obj.name).toEqual(\"tom\");\n  });\n\n  it(\"should read strongly typed object\", () => {\n    class User {\n      constructor(options) {\n        this.id = options.id;\n        this.name = options.name;\n      }\n    }\n    var content = \"{\\\"id\\\":42,\\\"name\\\":\\\"tom\\\"}\";\n    var obj = jsonMediaTypeFormatter.read(content, User);\n    expect(obj).not.toBeNull();\n    expect(obj instanceof User).toBe(true);\n    expect(obj.id).toEqual(42);\n    expect(obj.name).toEqual(\"tom\");\n  });\n\n  it(\"should return null on read if content is null\", () => {\n    var content = jsonMediaTypeFormatter.read(null);\n    expect(content).toBeNull();\n  });\n\n});"],"sourceRoot":"/source/"}