{"version":3,"sources":["query-translator.spec.js"],"names":[],"mappings":";;AAAA,SAAS,kBAAT,EAA6B,MAAM;;AAEjC,MAAI,kBAAkB,IAAtB;;AAEA,aAAW,MAAM;AACf,sBAAkB,IAAI,KAAK,eAAT,EAAlB;AACD,GAFD;;AAIA,YAAU,MAAM;AACd,sBAAkB,IAAlB;AACD,GAFD;;AAIA,KAAG,mDAAH,EAAwD,MAAM;AAC5D,QAAI,OAAO,2CAAX;AACA,QAAI,aAAa,gBAAgB,iBAAhB,CAAkC,IAAlC,CAAjB;AACA,WAAO,UAAP,EAAmB,GAAnB,CAAuB,IAAvB,CAA4B,IAA5B;AACA,WAAO,UAAP,EAAmB,OAAnB,CAA2B,QAAQ,eAAR,CAAwB,CAAC,QAAD,EAAW,MAAX,CAAxB,CAA3B;AACD,GALD;;AAOA,KAAG,0DAAH,EAA+D,MAAM;AACnE,QAAI,OAAO,YAAX;AACA,QAAI,aAAa,gBAAgB,iBAAhB,CAAkC,IAAlC,CAAjB;AACA,WAAO,UAAP,EAAmB,IAAnB,CAAwB,IAAxB;AACD,GAJD;;AAMA,KAAG,gDAAH,EAAqD,MAAM;AACzD,QAAI,QAAQ,IAAI,KAAK,KAAT,CAAe;AACzB,YAAM,qBADmB;AAEzB,kBAAY;AACV,gBAAQ;AADE;AAFa,KAAf,CAAZ;AAMA,QAAI,OAAO,gBAAgB,OAAhB,CAAwB,KAAxB,CAAX;AACA,WAAO,IAAP,EAAa,OAAb,CAAqB,eAArB;AACD,GATD;;AAWA,KAAG,uDAAH,EAA4D,MAAM;AAChE,QAAI,QAAQ,IAAI,KAAK,KAAT,CAAe;AACzB,YAAM;AADmB,KAAf,CAAZ;AAGA,QAAI,OAAO,gBAAgB,OAAhB,CAAwB,KAAxB,CAAX;AACA,WAAO,IAAP,EAAa,OAAb,CAAqB,YAArB;AACD,GAND;;AAQA,KAAG,6CAAH,EAAkD,MAAM;AACtD,QAAI,QAAQ,IAAI,KAAK,KAAT,CAAe;AACzB,YAAM,YADmB;AAEzB,kBAAY;AACV,cAAM,KADI;AAEV,cAAM,CAFI;AAGV,cAAM;AAHI;AAFa,KAAf,CAAZ;AAQA,QAAI,OAAO,gBAAgB,cAAhB,CAA+B,KAA/B,CAAX;AACA,WAAO,IAAP,EAAa,OAAb,CAAqB,yBAArB;AACD,GAXD;;AAaA,KAAI,2CAAJ,EAAiD,MAAM;AACrD,QAAI,QAAQ,IAAI,KAAK,KAAT,CAAe;AACzB,cAAQ,KADiB;AAEzB,YAAM,YAFmB;AAGzB,kBAAY;AACV,cAAM;AADI;AAHa,KAAf,CAAZ;AAOA,QAAI,iBAAiB,gBAAgB,SAAhB,CAA0B,KAA1B,CAArB;AACA,WAAO,cAAP,EAAuB,GAAvB,CAA2B,IAA3B,CAAgC,IAAhC;AACA,WAAO,eAAe,MAAtB,EAA8B,OAA9B,CAAsC,KAAtC;AACA,WAAO,eAAe,IAAtB,EAA4B,OAA5B,CAAoC,YAApC;AACA,WAAO,eAAe,WAAtB,EAAmC,OAAnC,CAA2C,UAA3C;AACD,GAbD;AAeD,CAxED","file":"query-translator.spec.js","sourcesContent":["describe(\"Query translator\", () => {\n\n  var queryTranslator = null;\n\n  beforeEach(() => {\n    queryTranslator = new rest.QueryTranslator();\n  });\n\n  afterEach(() => {\n    queryTranslator = null;\n  });\n\n  it(\"should extract parameter names from path template\", () => {\n    var path = '/api/users/{userId}/settings/{name}/value';\n    var parameters = queryTranslator.getParameterNames(path);\n    expect(parameters).not.toBe(null);\n    expect(parameters).toEqual(jasmine.arrayContaining(['userId', 'name']));\n  });\n\n  it(\"should not return any parameter names from path template\", () => {\n    var path = '/api/users';\n    var parameters = queryTranslator.getParameterNames(path);\n    expect(parameters).toBe(null);\n  });\n\n  it(\"should set parameters defined in path template\", () => {\n    var query = new rest.Query({\n      path: '/api/users/{userId}',\n      parameters: {\n        userId: 42\n      }\n    });\n    var path = queryTranslator.getPath(query);\n    expect(path).toEqual('/api/users/42');\n  });\n\n  it(\"should remove unset parameters from the path template\", () => {\n    var query = new rest.Query({\n      path: '/api/users'\n    });\n    var path = queryTranslator.getPath(query);\n    expect(path).toEqual('/api/users');\n  });\n\n  it(\"should serialize parameters to query string\", () => {\n    var query = new rest.Query({\n      path: '/api/users',\n      parameters: {\n        name: \"Tom\",\n        skip: 0,\n        take: 10\n      }\n    });\n    var path = queryTranslator.getQueryString(query);\n    expect(path).toEqual('name=Tom&skip=0&take=10');\n  });\n\n  it (\"should translate query to request message\", () => {\n    var query = new rest.Query({\n      method: 'GET',\n      path: '/api/users',\n      parameters: {\n        name: 'Tom'\n      }\n    });\n    var requestMessage = queryTranslator.translate(query);\n    expect(requestMessage).not.toBe(null);\n    expect(requestMessage.method).toEqual('GET');\n    expect(requestMessage.path).toEqual('/api/users');\n    expect(requestMessage.queryString).toEqual('name=Tom');\n  });\n\n});"],"sourceRoot":"/source/"}