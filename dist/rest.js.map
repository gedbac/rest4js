{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","src/batch-execution-context.js","src/batch.js","src/cancellation-token-source.js","src/cancellation-token.js","src/json-media-type-formatter.js","src/media-type-formatter-base.js","src/options.js","src/query-base.js","src/query-factory.js","src/query-translator.js","src/query.js","src/repository.js","src/rest-bulk-request-message.js","src/rest-bulk-response-message.js","src/rest-client-error.js","src/rest-client.js","src/rest-message-context.js","src/rest-message-handler-base.js","src/rest-message-handler.js","src/rest-message-interceptor-base.js","src/rest-request-message.js","src/rest-response-message.js","src/rest.js","src/sort-direction.js","src/url-builder.js"],"names":[],"mappings":"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","file":"rest.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Options from 'options';\r\n\r\nexport default class BatchExecutionContext {\r\n\r\n  constructor(options) {\r\n    this.batch = null;\r\n    this.client = null;\r\n    this.requestMessages = [];\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  static get current() {\r\n    var activeExecutionContexts = BatchExecutionContext.activeExecutionContexts;\r\n    if (activeExecutionContexts && activeExecutionContexts.length > 0) {\r\n      return activeExecutionContexts[activeExecutionContexts.length - 1];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static begin(options) {\r\n    var context = new BatchExecutionContext(options);\r\n    if (!BatchExecutionContext.activeExecutionContexts) {\r\n      BatchExecutionContext.activeExecutionContexts = [];\r\n    }\r\n    BatchExecutionContext.activeExecutionContexts.push(context);\r\n  }\r\n\r\n  static end() {\r\n    if (BatchExecutionContext.activeExecutionContexts) {\r\n      BatchExecutionContext.activeExecutionContexts.pop();\r\n    }\r\n  }\r\n}","import CancellationToken from 'cancellation-token';\r\nimport BatchExecutionContext from 'batch-execution-context';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class Batch {\r\n\r\n  constructor() {\r\n    this._operations = [];\r\n  }\r\n\r\n  add(operation) {\r\n    if (operation && typeof operation === 'function') {\r\n      this._operations.push(operation);\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Operation is not defined or it's type is invalid\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  execute(cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        if (this._operations && this._operations.length > 0) {\r\n          BatchExecutionContext.begin({\r\n            batch: this\r\n          });\r\n          this._operations.forEach(operation => {\r\n            operation();\r\n          });\r\n          BatchExecutionContext.end();\r\n        }\r\n        resolve();\r\n      } catch (ex) {\r\n        reject(ex);\r\n      }\r\n    });\r\n  }\r\n\r\n}","import CancellationToken from 'cancellation-token';\r\n\r\nexport default class CancellationTokenSource {\r\n\r\n  constructor() {\r\n    this.canceled = false;\r\n    this.token = new CancellationToken();\r\n    this.linkedTokens = [];\r\n  }\r\n\r\n  cancel() {\r\n    this.canceled = true;\r\n    this._propagateToCancellationToken(this.token);\r\n    if (this.linkedTokens && this.linkedTokens.length > 0) {\r\n      for (var linkedToken in this.linkedTokens) {\r\n        this._propagateToCancellationToken(linkedToken);\r\n      }\r\n    }\r\n  }\r\n\r\n  cancelAfter(delay) {\r\n    setTimeout(() => {\r\n      this.cancel();\r\n    }, delay);\r\n  }\r\n\r\n  _propagateToCancellationToken(cancellationToken) {\r\n    if (cancellationToken) {\r\n      cancellationToken.canceled = true;\r\n      if (cancellationToken.waitHandle) {\r\n        cancellationToken.waitHandle();\r\n      }\r\n    }\r\n  }\r\n\r\n  static createLinkedCancellationTokenSource(linkedTokens) {\r\n    var cancellationTokenSource = new CancellationTokenSource(linkedTokens);\r\n    if (linkedTokens) {\r\n      if (linkedTokens instanceof Array) {\r\n        linkedTokens.forEach(linkedToken => {\r\n          cancellationTokenSource.linkedTokens.push(linkedToken);\r\n        });\r\n      } else {\r\n        cancellationTokenSource.linkedTokens.push(linkedTokens);\r\n      }\r\n    }\r\n    return cancellationTokenSource;\r\n  }\r\n\r\n}","import RestClientError from 'rest-client-error';\r\n\r\nexport default class CancellationToken {\r\n\r\n  constructor(canceled = false) {\r\n    this.canceled = canceled;\r\n    this.WaitHandle = null;\r\n  }\r\n\r\n  register(waitHandle) {\r\n    this.waitHandle = waitHandle;\r\n  }\r\n\r\n  throwIfCanceled() {\r\n    if (this.canceled) {\r\n      throw new RestClientError({\r\n        message: \"Operation has been canceled\"\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nCancellationToken.none = new CancellationToken();","import Options from 'options';\r\nimport MediaTypeFormatterBase from 'media-type-formatter-base';\r\n\r\nexport default class JsonMediaTypeFormatter extends MediaTypeFormatterBase {\r\n\r\n  constructor(options) {\r\n    super();\r\n    this.indent = 0;\r\n    this.mediaTypes.push('application/json');\r\n    this.defaultMediaType = 'application/json';\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  read(text, objectType) {\r\n    if (text) {\r\n      var value = JSON.parse(text);\r\n      if (objectType) {\r\n        if (value instanceof Array) {\r\n          var array = [];\r\n          value.forEach(item => {\r\n            array.push(new objectType(item));\r\n          });\r\n          return array;\r\n        } else {\r\n          value = new objectType(value);\r\n        }\r\n      }\r\n      return value;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  write(value) {\r\n    if (value) {\r\n      return JSON.stringify(value, null, this.indent);\r\n    }\r\n    return null;\r\n  }\r\n}","import Options from 'options';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class MediaTypeFormatterBase {\r\n\r\n  constructor(options) {\r\n    this.mediaTypes = [];\r\n    this.defaultMediaType = null;\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  read(content, objectType) {\r\n    throw new RestClientError({\r\n      message: \"Method 'read' is not supported for class 'MediaTypeFormatterBase'\"\r\n    });\r\n  }\r\n\r\n  write(value) {\r\n    throw new RestClientError({\r\n      message: \"Method 'write' is not supported for class 'MediaTypeFormatterBase'\"\r\n    });\r\n  }\r\n\r\n}","export default class Options {\r\n\r\n  static assign(target, options) {\r\n    if (target && options) {\r\n      for (var propertyName in options) {\r\n        if (propertyName in target) {\r\n          target[propertyName] = options[propertyName];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}","import Options from 'options';\r\nimport CancellationToken from 'cancellation-token';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class QueryBase {\r\n\r\n  constructor(options) {\r\n    this.client = null;\r\n    this.method = 'GET';\r\n    this.path = '/';\r\n    this.headers = {};\r\n    this.content = null;\r\n    this.parameters = {};\r\n    this.timeout = 0;\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  setMethod(value) {\r\n    if (!value) {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'value' is not passed to the method 'setMethod'\"\r\n      });\r\n    }\r\n    this.method = value;\r\n    return this;\r\n  }\r\n\r\n  setPath(value) {\r\n    if (!value) {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'value' is not passed to the method 'setPath'\"\r\n      });\r\n    }\r\n    this.path = value;\r\n    return this;\r\n  }\r\n\r\n  setHeader(name, value) {\r\n    if (!name) {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'name' is not passed to method 'setHeader'\"\r\n      });\r\n    }\r\n    this.headers[name] = value;\r\n    return this;\r\n  }\r\n\r\n  setContent(value) {\r\n    this.content = value;\r\n    return this;\r\n  }\r\n\r\n  setParameter(name, value) {\r\n    if (!name) {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'name' is not passed to method 'setParameter'\"\r\n      });\r\n    }\r\n    this.parameters[name] = value;\r\n    return this;\r\n  }\r\n\r\n  setParameters(parameters) {\r\n    if (parameters) {\r\n      for (var parameterName in parameters) {\r\n        this.setParameter(parameterName, parameters[parameterName]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  setTimeout(value) {\r\n    this.timeout = value;\r\n    return this;\r\n  }\r\n\r\n  execute(cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      var queryTranslator = null;\r\n      if (this.client && this.client.services) {\r\n        queryTranslator = this.client.services.queryTranslator;\r\n      }\r\n      if (queryTranslator) {\r\n        this.client\r\n          .send(queryTranslator.translate(this), cancellationToken)\r\n          .then(resolve)\r\n          .catch(reject);\r\n      } else {\r\n        reject(new RestClientError({\r\n          message: \"Query translator is undefined\"\r\n        }));\r\n      }\r\n    });\r\n  }\r\n\r\n  get() {\r\n    return this.setMethod('GET');\r\n  }\r\n\r\n  save() {\r\n    return this.setMethod('POST');\r\n  }\r\n\r\n  update() {\r\n    return this.setMethod('PUT');\r\n  }\r\n\r\n  patch() {\r\n    return this.setMethod('PATCH');\r\n  }\r\n\r\n  del() {\r\n    return this.setMethod('DELETE');\r\n  }\r\n\r\n}","import Query from 'query';\r\n\r\nexport default class QueryFactory {\r\n\r\n  create(options) {\r\n    return new Query(options);\r\n  }\r\n\r\n}","import RestRequestMessage from 'rest-request-message';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class QueryTranslator {\r\n\r\n  constructor() {\r\n    this._parameterNameCache = {};\r\n  }\r\n\r\n  translate(query) {\r\n    var requestMessage = null;\r\n    if (query) {\r\n      requestMessage = new RestRequestMessage({\r\n        method: query.method,\r\n        path: this.getPath(query),\r\n        queryString: this.getQueryString(query),\r\n        headers: query.headers,\r\n        content: query.content,\r\n        timeout: query.timeout\r\n      });\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'query' is not passed to the method 'translate'\"\r\n      });\r\n    }\r\n    return requestMessage;\r\n  }\r\n\r\n  getPath(query) {\r\n    var path = null;\r\n    if (query) {\r\n      path = query.path;\r\n      var parameterNames = this.getParameterNames(query.path);\r\n      if (parameterNames && parameterNames.length > 0) {\r\n        parameterNames.forEach(parameterName => {\r\n          if (query.parameters) {\r\n            if (parameterName in query.parameters) {\r\n              path = path.replace(`{${parameterName}}`, query.parameters[parameterName]);\r\n            } else {\r\n              path = path.replace(`/{${parameterName}}`, '');\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return path;\r\n  }\r\n\r\n  getQueryString(query) {\r\n    var queryString = '';\r\n    if (query && query.parameters) {\r\n      var pathParameterNames = this.getParameterNames(query.path);\r\n      for(var parameterName in query.parameters) {\r\n        if (!pathParameterNames || pathParameterNames.indexOf(parameterName) === -1) {\r\n          if (query.parameters[parameterName] !== null && query.parameters[parameterName] !== undefined) {\r\n            if (queryString) {\r\n              queryString += '&';\r\n            }\r\n            queryString += `${parameterName}=${query.parameters[parameterName]}`;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return queryString;\r\n  }\r\n\r\n  getParameterNames(path) {\r\n    var names = null;\r\n    if (path) {\r\n      var result = path.match(/\\{(.*?)\\}/g);\r\n      if (result && result.length > 0) {\r\n        names = [];\r\n        result.forEach(text => {\r\n          names.push(text.substring(1, text.length - 1));\r\n        });\r\n      }\r\n    }\r\n    return names;\r\n  }\r\n\r\n}","import Options from 'options';\r\nimport QueryBase from 'query-base';\r\nimport SortDirection from 'sort-direction';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class Query extends QueryBase {\r\n\r\n  constructor(options) {\r\n    super();\r\n    this.sorting = null;\r\n    this.transformation = null;\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  fields(fields) {\r\n    return this.setParameter('fields', fields);\r\n  }\r\n\r\n  sortBy(field) {\r\n    if (field) {\r\n      if (!this.sorting) {\r\n        this.sorting = [];\r\n        this.sorting.push({\r\n          field: field,\r\n          direction: SortDirection.Acs\r\n        });\r\n      } else {\r\n        throw new RestClientError({\r\n          message: \"Sorting is already defined\"\r\n        });\r\n      }\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'field' is not passed to the method 'sortBy'\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  sortByDescending(field) {\r\n    if (field) {\r\n      if (!this.sorting) {\r\n        this.sorting = [];\r\n        this.sorting.push({\r\n          field: field,\r\n          direction: SortDirection.Desc\r\n        });\r\n      } else {\r\n        throw new RestClientError({\r\n          message: \"Sorting is already defined\"\r\n        });\r\n      }\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'field' is not passed to the method 'sortByDescending'\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  thenBy(field) {\r\n    if (field) {\r\n      if (this.sorting) {\r\n        this.sorting.push({\r\n          field: field,\r\n          direction: SortDirection.Asc\r\n        });\r\n      } else {\r\n        throw new RestClientError({\r\n          message: \"Sorting is not defined\"\r\n        });\r\n      }\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'field' is not passed to the method 'thenBy'\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  thenByDescending(field) {\r\n    if (field) {\r\n      if (this.sorting) {\r\n        this.sorting.push({\r\n          field: field,\r\n          direction: SortDirection.Desc\r\n        });\r\n      } else {\r\n        throw new RestClientError({\r\n          message: \"Sorting is not defined\"\r\n        });\r\n      }\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'field' is not passed to the method 'thenByDescending'\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n  skip(value) {\r\n    return this.setParameter('skip', value);\r\n  }\r\n\r\n  limit(value) {\r\n    return this.setParameter('limit', value);\r\n  }\r\n\r\n  transform(func) {\r\n    if (func) {\r\n      if (typeof func === \"function\") {\r\n        this.transformation = func;\r\n      } else {\r\n        throw new RestClientError({\r\n          message: \"Parameter 'func' passed to the method 'transform' has to be a function\"\r\n        });\r\n      }\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Parameter 'func' is not passed to the method 'transform'\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n}","import CancellationToken from \"cancellation-token\";\r\nimport Options from 'options';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class Repository {\r\n\r\n  constructor(options) {\r\n    this.client = null;\r\n    this.path = null;\r\n    this.objectType = null;\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  query() {\r\n    var query = null;\r\n    var queryFactory = null;\r\n    if (this.client && this.client.services) {\r\n      queryFactory = this.client.services.queryFactory;\r\n    }\r\n    if (queryFactory) {\r\n      query = queryFactory.create({\r\n        client: this.client,\r\n        path: this.path\r\n      });\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Query factoy is undefined\"\r\n      });\r\n    }\r\n    return query;\r\n  }\r\n\r\n  get(parameters, cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        this.query()\r\n          .get()\r\n            .setParameters(parameters)\r\n            .execute(cancellationToken)\r\n            .then(responseMessage => {\r\n              if (responseMessage.status >= 200 && responseMessage.status < 300) {\r\n                resolve(responseMessage.content);\r\n              } else {\r\n                if (responseMessage.content) {\r\n                  reject(responseMessage.content);\r\n                } else {\r\n                  reject({\r\n                    message: responseMessage.statusText\r\n                  });\r\n                }\r\n              }\r\n            })\r\n            .catch(ex => reject(ex));\r\n      } catch(ex) {\r\n        reject(ex);\r\n      }\r\n    });\r\n    // if (!BatchExecutionContext.current) {\r\n    //   return this.client.send(requestMessage);\r\n    // } else {\r\n    //   var context = BatchExecutionContext.current;\r\n    //   if (!context.client) {\r\n    //     context.client = this.client;\r\n    //   } else if (context.client == this.client) {\r\n    //     context.requestMessages.push(requestMessage);\r\n    //   } else {\r\n    //     // TODO: review error message\r\n    //     throw {\r\n    //       message: \"All operation has to use same rest client\"\r\n    //     };\r\n    //   }\r\n    //   // TODO: bla bla bla\r\n    //   // return promise...\r\n    // }\r\n  }\r\n\r\n  save(parameters, value, cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      return this.query()\r\n        .save()\r\n          .setParameters(parameters)\r\n          .setContent(value)\r\n          .execute(cancellationToken)\r\n          .then(responseMessage => {\r\n            if (responseMessage.status >= 200 && responseMessage.status < 300) {\r\n              // TODO: if content, otherwise take id from location header and set id\r\n              resolve(responseMessage.content);\r\n            } else {\r\n              if (responseMessage.content) {\r\n                reject(responseMessage.content);\r\n              } else {\r\n                reject(new RestClientError({\r\n                  message: responseMessage.statusText\r\n                }));\r\n              }\r\n            }\r\n          })\r\n          .catch(ex => reject(ex));\r\n    });\r\n  }\r\n\r\n  update(parameters, value, cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      this.query()\r\n        .update()\r\n          .setParameters(parameters)\r\n          .setContent(value)\r\n          .execute(cancellationToken)\r\n          .then(responseMessage => {\r\n            if (responseMessage.status >= 200 && responseMessage.status < 300) {\r\n              resolve(responseMessage.content);\r\n            } else {\r\n              if (responseMessage.content) {\r\n                reject(responseMessage.content);\r\n              } else {\r\n                reject(new RestClientError({\r\n                  message: responseMessage.statusText\r\n                }));\r\n              }\r\n            }\r\n          })\r\n          .catch(ex => reject(ex));\r\n    });\r\n  }\r\n\r\n  patch(parameters, value, cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      this.query()\r\n        .patch()\r\n          .setParameters(parameters)\r\n          .setContent(value)\r\n          .execute(cancellationToken)\r\n          .then(responseMessage => {\r\n            if (responseMessage.status >= 200 && responseMessage.status < 300) {\r\n              resolve(responseMessage.content);\r\n            } else {\r\n              if (responseMessage.content) {\r\n                reject(responseMessage.content);\r\n              } else {\r\n                reject(new RestClientError({\r\n                  message: responseMessage.statusText\r\n                }));\r\n              }\r\n            }\r\n          })\r\n          .catch(ex => reject(ex));\r\n    });\r\n  }\r\n\r\n  del(parameters, cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      this.query()\r\n        .del()\r\n          .setParameters(parameters)\r\n          .execute(cancellationToken)\r\n          .then(responseMessage => {\r\n            if (responseMessage.status >= 200 && responseMessage.status < 300) {\r\n              resolve(responseMessage.content);\r\n            } else {\r\n              if (responseMessage.content) {\r\n                reject(responseMessage.content);\r\n              } else {\r\n                reject(new RestClientError({\r\n                  message: responseMessage.statusText\r\n                }));\r\n              }\r\n            }\r\n          })\r\n          .catch(ex => reject(ex));\r\n    });\r\n  }\r\n\r\n}","import Options from 'options';\r\nimport RestRequestMessage from 'rest-request-message';\r\nimport RestClientError from 'rest-client-error';\r\n\r\nexport default class RestBulkRequestMessage {\r\n\r\n  constructor(options) {\r\n    this.method = 'POST';\r\n    this.path = null;\r\n    this.queryString = null;\r\n    this.headers = null;\r\n    this.timeout = null;\r\n    this.requestMessages = [];\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  add(message) {\r\n    if (message && message instanceof RestRequestMessage) {\r\n      if (this.requestMessages) {\r\n        this.requestMessages.push(message);\r\n      }\r\n    } else {\r\n      throw new RestClientError({\r\n        message: \"Message is undefined or it's type is invalid\"\r\n      });\r\n    }\r\n    return this;\r\n  }\r\n\r\n}","import Options from 'options';\r\n\r\nexport default class RestBulkResponseMessage {\r\n\r\n  constructor(options) {\r\n    this.requestMessage = null;\r\n    this.status = null;\r\n    this.statusText = null;\r\n    this.headers = null;\r\n    this.responseMessages = [];\r\n    Options.assign(this, options);\r\n  }\r\n\r\n}","import Options from 'options';\n\nexport default class RestClientError {\n\n  constructor(options) {\n    this.name = 'RestClientError';\n    this.stack = null;\n    this.message = \"A rest error has occurred.\";\n    var lines, i, tmp;\n    if ((typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Chrome') !== -1) ||\n      (typeof navigator === 'undefined')) {\n      lines = new Error().stack.split('\\n');\n      if (lines && lines.length > 2) {\n        tmp = [];\n        for (i = 2; i < lines.length; i++) {\n          if (lines[i]) {\n            tmp.push(lines[i].trim());\n          }\n        }\n        this.stack = tmp.join('\\n');\n      }\n    } else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Firefox') !== -1) {\n      lines = new Error().stack.split('\\n');\n      if (lines && lines.length > 1) {\n        tmp = [];\n        for (i = 1; i < lines.length; i++) {\n          if (lines[i]) {\n            tmp.push('at ' + lines[i].trim().replace('@', ' (') + ')');\n          }\n        }\n        this.stack = tmp.join('\\n');\n      }\n    } else if (typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Trident') !== -1) {\n      try {\n        throw new Error();\n      } catch (error) {\n        if ('stack' in error) {\n          lines = error.stack.split('\\n');\n          if (lines && lines.length > 2) {\n            tmp = [];\n            for (i = 2; i < lines.length; i++) {\n              if (lines[i]) {\n                tmp.push(lines[i].trim());\n              }\n            }\n            this.stack = tmp.join('\\n');\n          }\n        } else {\n          this.stack = '';\n        }\n      }\n    } else {\n      var error = new Error();\n      if ('stack' in error) {\n        this.stack = error.stack;\n      } else {\n        this.stack = '';\n      }\n    }\n    Options.assign(this, options);\n  }\n\n  toString() {\n    var text = this.name + ': ' + this.message;\n    if (this.stack) {\n      text += '\\n\\t' + this.stack.replace(/\\n/g, '\\n\\t');\n    }\n    return text;\n  }\n\n}","import Options from 'options';\r\nimport CancellationToken from 'cancellation-token';\r\nimport RestClientError from 'rest-client-error';\r\nimport RestMessageContext from 'rest-message-context';\r\nimport RestBulkResponseMessage from 'rest-bulk-response-message';\r\nimport MediaTypeFormatterBase from 'media-type-formatter-base';\r\nimport JsonMediaTypeFormatter from 'json-media-type-formatter';\r\nimport RestMessageHandlerBase from 'rest-message-handler-base';\r\nimport RestMessageHandler from 'rest-message-handler';\r\nimport QueryFactory from 'query-factory';\r\nimport QueryTranslator from 'query-translator';\r\nimport UrlBuilder from 'url-builder';\r\n\r\nexport default class RestClient {\r\n\r\n  constructor(options) {\r\n    this.scheme = 'http';\r\n    this.host = 'localhost';\r\n    this.port = 80;\r\n    this.timeout = 30;\r\n    this.defaultContentType = 'application/json';\r\n    this.mediaTypeFormatters = [\r\n      new JsonMediaTypeFormatter()\r\n    ];\r\n    this.messageHandlers = [\r\n      new RestMessageHandler()\r\n    ];\r\n    this.services = {\r\n      queryFactory: new QueryFactory(),\r\n      queryTranslator: new QueryTranslator()\r\n    };\r\n    this.messageInterceptors = [\r\n\r\n    ];\r\n    Options.assign(this, options);\r\n  }\r\n\r\n  send(requestMessage, cancellationToken = CancellationToken.none) {\r\n    return new Promise((resolve, reject) => {\r\n      try {\r\n        cancellationToken.throwIfCanceled();\r\n        if (!requestMessage) {\r\n          throw new RestClientError({\r\n            message: \"Parameter 'requestMessage' is not passed to the method 'send' of class 'RestClient'\"\r\n          });\r\n        }\r\n        var messageHandler = this.getMessageHandler(requestMessage);\r\n        if (!messageHandler) {\r\n          throw new RestClientError({\r\n            message: `Message handler is not defined for request message of type '${requestMessage.constructor.name}'`\r\n          });\r\n        }\r\n        var context = new RestMessageContext({\r\n          client: this\r\n        });\r\n        messageHandler\r\n          .send(requestMessage, context, cancellationToken)\r\n          .then(resolve, reject);\r\n      } catch (error) {\r\n        reject(error);\r\n      }\r\n    });\r\n  }\r\n\r\n  use(value) {\r\n    if (value) {\r\n      if (value instanceof MediaTypeFormatterBase) {\r\n        this.mediaTypeFormatters.push(value);\r\n      } else if (value instanceof RestMessageHandlerBase) {\r\n        this.messageHandlers.push(value);\r\n      } else if (value instanceof RestMessageInterceptorBase) {\r\n        this.messageInterceptors.push(value);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  getMessageHandler(requestMessage) {\r\n    var messageHandler = null;\r\n    if (requestMessage && this.messageHandlers && this.messageHandlers instanceof Array) {\r\n      for (var i = 0; i < this.messageHandlers.length; i++) {\r\n        if (this.messageHandlers[i].messageTypes &&\r\n          this.messageHandlers[i].messageTypes instanceof Array &&\r\n          this.messageHandlers[i].messageTypes.indexOf(requestMessage.constructor) !== -1) {\r\n          messageHandler = this.messageHandlers[i];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return messageHandler;\r\n  }\r\n\r\n  getMediaTypeFormatter(contentType) {\r\n    var mediaTypeFormatter = null;\r\n    if (contentType && this.mediaTypeFormatters && this.mediaTypeFormatters instanceof Array) {\r\n      for (var i = 0; i < this.mediaTypeFormatters.length; i++) {\r\n        if (this.mediaTypeFormatters[i].mediaTypes &&\r\n          this.mediaTypeFormatters[i].mediaTypes instanceof Array &&\r\n          this.mediaTypeFormatters[i].mediaTypes.indexOf(contentType) !== -1) {\r\n          mediaTypeFormatter = this.mediaTypeFormatters[i];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return mediaTypeFormatter;\r\n  }\r\n\r\n  _sendBulkMessage(bulkRequestMessage, httpRequest, resolve, reject) {\r\n    if (!bulkRequestMessage.method) {\r\n      throw new RestClientError({\r\n        message: \"Request doesn't have method defined\"\r\n      });\r\n    }\r\n    var url = new UrlBuilder({\r\n      scheme: this.scheme,\r\n      host: this.host,\r\n      port: this.port,\r\n      path: bulkRequestMessage.path,\r\n      queryString: bulkRequestMessage.queryString\r\n    }).toString();\r\n    httpRequest.open(bulkRequestMessage.method, url, true);\r\n    httpRequest.timeout = this.timeout;\r\n    if ('timeout' in bulkRequestMessage && bulkRequestMessage.timeout > 0) {\r\n      httpRequest.timeout = bulkRequestMessage.timeout;\r\n    }\r\n    bulkRequestMessage.accept = 'multipart/mixed';\r\n    httpRequest.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n    if (bulkRequestMessage.headers) {\r\n      for (var headerName in bulkRequestMessage.headers) {\r\n        httpRequest.setRequestHeader(headerName, bulkRequestMessage.headers[headerName]);\r\n      }\r\n    }\r\n    httpRequest.onreadystatechange = () => {\r\n      if (httpRequest && httpRequest.readyState === 4) {\r\n        this._onReceiveBulkMessage(bulkRequestMessage, httpRequest, resolve, reject);\r\n      }\r\n    };\r\n    if (bulkRequestMessage.requestMessages && bulkRequestMessage.requestMessages.length > 0) {\r\n      var content = '';\r\n      var boundary = bulkRequestMessage.boundary || 'gc0p4Jq0M2Yt08jU534c0p';\r\n      httpRequest.setRequestHeader('Content-Type', `multipart/mixed; boundary=\"${boundary}\"`);\r\n      bulkRequestMessage.requestMessages.forEach(requestMessage => {\r\n        content = this._appendRequestMessageToContent(requestMessage, content, boundary);\r\n      });\r\n      content += `--${boundary}--`;\r\n      httpRequest.send(content);\r\n    } else {\r\n      httpRequest.send();\r\n    }\r\n  }\r\n\r\n  _appendRequestMessageToContent(requestMessage, output, boundary) {\r\n    if (!requestMessage.method) {\r\n      throw new RestClientError({\r\n        message: \"Request doesn't have method defined\"\r\n      });\r\n    }\r\n    if (!requestMessage.path) {\r\n      throw new RestClientError({\r\n        message: \"Request doesn't have path defined\"\r\n      });\r\n    }\r\n    output += `--${boundary}\\r\\n`;\r\n    output += 'application/http; msgtype=request\\r\\n\\r\\n';\r\n    output += `${requestMessage.method} ${requestMessage.path} HTTP/1.1\\r\\n`;\r\n    if (requestMessage.headers) {\r\n      for (var headerName in requestMessage.headers) {\r\n        output += `${headerName}: ${requestMessage.headers[headerName]}`;\r\n      }\r\n    }\r\n    if (requestMessage.content) {\r\n      var content = null;\r\n      var contentType = requestMessage.contentType;\r\n      if (contentType) {\r\n        contentType = this.defaultContentType;\r\n      }\r\n      var mediaTypeFormatter = this.getMediaTypeFormatter(contentType);\r\n      if (mediaTypeFormatter) {\r\n        content = mediaTypeFormatter.write(requestMessage.content);\r\n      } else {\r\n        content = requestMessage.content;\r\n      }\r\n      output += `Content-Type: ${contentType}`;\r\n      output += content;\r\n    }\r\n    return output;\r\n  }\r\n\r\n  _onReceiveBulkMessage(bulkRequestMessage, httpRequest, resolve, reject) {\r\n    // TODO: not implemented\r\n    resolve(new RestBulkResponseMessage({\r\n      requestMessage: bulkRequestMessage\r\n    }));\r\n  }\r\n\r\n  _getResponseHeaders(httpRequest) {\r\n    var headers = {};\r\n    var text = httpRequest.getAllResponseHeaders();\r\n    if (text) {\r\n      var pairs = text.split('\\r\\n');\r\n      pairs.forEach(pair => {\r\n        if (pair) {\r\n          var name = pair.substring(0, pair.indexOf(':'));\r\n          var value = pair.substring(pair.indexOf(':') + 2, pair.length);\r\n          headers[name] = value;\r\n        }\r\n      });\r\n    }\r\n    return headers;\r\n  }\r\n\r\n}","import Options from 'options';\n\nexport default class RestMessageContext {\n\n  constructor(options) {\n    this.client = null;\n    this.items = {};\n    Options.assign(this, options);\n  }\n\n}","import Options from 'options';\nimport CancellationToken from 'cancellation-token';\nimport RestClientError from 'rest-client-error';\n\nexport default class RestMessageHandlerBase {\n\n  constructor(options) {\n    this.messageTypes = [];\n    Options.assign(this, options);\n  }\n\n  send(requestMessage, context, cancellationToken = CancellationToken.none) {\n    throw new RestClientError({\n      message: \"Method 'send' is not supported for class 'RestMessageHandlerBase'\"\n    });\n  }\n\n}","import Options from 'options';\nimport CancellationToken from 'cancellation-token';\nimport RestMessageHandlerBase from 'rest-message-handler-base';\nimport RestClientError from 'rest-client-error';\nimport UrlBuilder from 'url-builder';\nimport RestRequestMessage from 'rest-request-message';\nimport RestResponseMessage from 'rest-response-message';\n\nexport default class RestMessageHandler extends RestMessageHandlerBase {\n\n  constructor(options) {\n    super();\n    this.messageTypes.push(RestRequestMessage);\n    Options.assign(this, options);\n  }\n\n  send(requestMessage, context, cancellationToken = CancellationToken.none) {\n    return new Promise((resolve, reject) => {\n      try {\n        var httpRequest = null;\n        cancellationToken.throwIfCanceled();\n        cancellationToken.register(() => {\n          try {\n            if (httpRequest) {\n              httpRequest.abort();\n            }\n            cancellationToken.throwIfCanceled();\n          } catch (ex) {\n            reject(ex);\n          }\n        });\n        if (!requestMessage) {\n          throw new RestClientError({\n            message: \"Parameter 'requestMessage' is not passed to the method 'send' of class 'RestMessageHandler'\"\n          });\n        }\n        if (!requestMessage.method) {\n          throw new RestClientError({\n            message: \"Method is not defined in request message\"\n          });\n        }\n        if (!context) {\n          throw new RestClientError({\n            message: \"Parameter 'context' is not passed to the method 'send' of class 'RestMessageHandler'\"\n          });\n        }\n        if (!context.client) {\n          throw new RestClientError({\n            message: \"Rest client is not define in context\"\n          });\n        }\n        var client = context.client;\n        httpRequest = new XMLHttpRequest();\n        var url = new UrlBuilder({\n          scheme: client.scheme,\n          host: client.host,\n          port: client.port,\n          path: requestMessage.path,\n          queryString: requestMessage.queryString\n        }).toString();\n        httpRequest.open(requestMessage.method, url, true);\n        httpRequest.timeout = client.timeout;\n        if ('timeout' in requestMessage && requestMessage.timeout > 0) {\n          httpRequest.timeout = requestMessage.timeout;\n        }\n        this._setRequestHeaders(requestMessage, httpRequest, context);\n        httpRequest.onreadystatechange = () => {\n          if (httpRequest && httpRequest.readyState === 4) {\n            this._onReceive(requestMessage, httpRequest, context)\n              .then(responseMessage => {\n                return this._onAfterReceive(responseMessage, context);\n              })\n              .then(responseMessage => {\n                resolve(responseMessage);\n              })\n              .catch(reason => {\n                reject(reason);\n              });\n          }\n        };\n        var content = null;\n        if (requestMessage.content) {\n          var contentType = requestMessage.contentType;\n          if (contentType) {\n            contentType = client.defaultContentType;\n          }\n          var mediaTypeFormatter = client.getMediaTypeFormatter(contentType);\n          if (mediaTypeFormatter) {\n            content = mediaTypeFormatter.write(requestMessage.content);\n          } else {\n            content = requestMessage.content;\n          }\n          httpRequest.setRequestHeader('Content-Type', contentType);\n        }\n        this._onBeforeSend(requestMessage, context)\n          .then(() => {\n            return this._onSend(content, httpRequest, context);\n          })\n          .catch(reason => {\n            reject(reason);\n          });\n      } catch(error) {\n        reject(error);\n      }\n    });\n  }\n\n  _setRequestHeaders(requestMessage, httpRequest, context) {\n    httpRequest.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n    if (requestMessage.accept) {\n      httpRequest.setRequestHeader('Accept', requestMessage.accept);\n    } else {\n      httpRequest.setRequestHeader('Accept', context.client.defaultContentType);\n    }\n    if (requestMessage.headers) {\n      for (var name in requestMessage.headers) {\n        httpRequest.setRequestHeader(name, requestMessage.headers[headerName]);\n      }\n    }\n  }\n\n  _getResponseHeaders(httpRequest) {\n    var headers = {};\n    var text = httpRequest.getAllResponseHeaders();\n    if (text) {\n      var pairs = text.split('\\r\\n');\n      pairs.forEach(pair => {\n        if (pair) {\n          var name = pair.substring(0, pair.indexOf(':'));\n          var value = pair.substring(pair.indexOf(':') + 2, pair.length);\n          headers[name] = value;\n        }\n      });\n    }\n    return headers;\n  }\n\n  _onSend(content, httpRequest, context) {\n    return new Promise((resolve, reject) => {\n      if (content) {\n        httpRequest.send(content);\n      } else {\n        httpRequest.send();\n      }\n      resolve();\n    });\n  }\n\n  _onReceive(requestMessage, httpRequest, context) {\n    return new Promise((resolve, reject) => {\n      if (httpRequest.status !== 0) {\n        var responseMessage = new RestResponseMessage({\n          requestMessage: requestMessage,\n          status: httpRequest.status,\n          statusText: httpRequest.statusText,\n          headers: this._getResponseHeaders(httpRequest)\n        });\n        if (httpRequest.responseText) {\n          var content = null;\n          var contentType = httpRequest.getResponseHeader(\"Content-Type\");\n          var mediaTypeFormatter = context.client.getMediaTypeFormatter(contentType);\n          if (mediaTypeFormatter) {\n            content = mediaTypeFormatter.read(httpRequest.responseText);\n          } else {\n            content = httpRequest.responseText;\n          }\n          responseMessage.contentType = contentType;\n          responseMessage.content = content;\n        }\n        resolve(responseMessage);\n      } else {\n        reject(new RestClientError({\n          message: \"Failed to connect to the server\"\n        }));\n      }\n    });\n  }\n\n  _onBeforeSend(requestMessage, context) {\n    return Promise.resolve(requestMessage);\n  }\n\n  _onAfterReceive(responseMessage, context) {\n    return Promise.resolve(responseMessage);\n  }\n\n}","import Options from 'options';\nimport CancellationToken from 'cancellation-token';\n\nexport default class RestMessageInterceptorBase {\n\n  constructor(options) {\n    Options.assign(this, options);\n  }\n\n  beforeSend(requestMessage, context, cancellationToken = CancellationToken.none) {\n    return Promise.resolve(requestMessage);\n  }\n\n  afterSend(responseMessage, context, cancellationToken = CancellationToken.none) {\n    return Promise.resolve(responseMessage);\n  }\n\n}","import Options from 'options';\r\n\r\nexport default class RestRequestMessage {\r\n\r\n  constructor(options) {\r\n    this.method = null;\r\n    this.path = null;\r\n    this.queryString = null;\r\n    this.headers = null;\r\n    this.accept = null;\r\n    this.content = null;\r\n    this.contentType = null;\r\n    this.objectType = null;\r\n    this.timeout = null;\r\n    Options.assign(this, options);\r\n  }\r\n\r\n}","import Options from 'options';\r\n\r\nexport default class RestResponseMessage {\r\n\r\n  constructor(options) {\r\n    this.requestMessage = null;\r\n    this.status = null;\r\n    this.statusText = null;\r\n    this.headers = null;\r\n    this.content = null;\r\n    this.contentType = null;\r\n    Options.assign(this, options);\r\n  }\r\n\r\n}","import Options from 'options';\r\nimport CancellationToken from 'cancellation-token';\r\nimport CancellationTokenSource from 'cancellation-token-source';\r\nimport RestClientError from 'rest-client-error';\r\nimport UrlBuilder from 'url-builder';\r\nimport RestClient from 'rest-client';\r\nimport RestRequestMessage from 'rest-request-message';\r\nimport RestResponseMessage from 'rest-response-message';\r\nimport RestBulkRequestMessage from 'rest-bulk-request-message';\r\nimport RestBulkResponseMessage from 'rest-bulk-response-message';\r\nimport RestMessageContext from 'rest-message-context';\r\nimport RestMessageHandlerBase from 'rest-message-handler-base';\r\nimport RestMessageHandler from 'rest-message-handler';\r\nimport MediaTypeFormatterBase from 'media-type-formatter-base';\r\nimport JsonMediaTypeFormatter from 'json-media-type-formatter';\r\nimport RestMessageInterceptorBase from 'rest-message-interceptor-base';\r\n\r\nimport Batch from 'batch';\r\nimport QueryBase from 'query-base';\r\nimport Query from 'query';\r\nimport SortDirection from 'sort-direction';\r\nimport Repository from 'repository';\r\nimport QueryFactory from 'query-factory';\r\nimport QueryTranslator from 'query-translator';\r\n\r\nexport {\r\n  Options,\r\n  CancellationToken,\r\n  CancellationTokenSource,\r\n  RestClientError,\r\n  UrlBuilder,\r\n  RestClient,\r\n  RestRequestMessage,\r\n  RestResponseMessage,\r\n  RestBulkRequestMessage,\r\n  RestBulkResponseMessage,\r\n  RestMessageContext,\r\n  RestMessageHandlerBase,\r\n  RestMessageHandler,\r\n  MediaTypeFormatterBase,\r\n  JsonMediaTypeFormatter,\r\n  RestMessageInterceptorBase,\r\n\r\n  Batch,\r\n  QueryBase,\r\n  Query,\r\n  SortDirection,\r\n  Repository,\r\n  QueryFactory,\r\n  QueryTranslator\r\n};","export default class SortDirection {}\n\nSortDirection.Asc = 1;\nSortDirection.Desc = -1;","import Options from 'options';\n\nexport default class UrlBuilder {\n\n  constructor(options) {\n    this.scheme = 'http';\n    this.host = 'localhost';\n    this.port = 80;\n    this.path = '/';\n    this.queryString = null;\n    Options.assign(this, options);\n  }\n\n  toString() {\n    var url = '';\n    if (this.scheme) {\n      url += `${this.scheme}://`;\n    } else {\n      url += 'http://';\n    }\n    if (this.host) {\n      url += `${this.host}`;\n    } else {\n      url += 'localhost';\n    }\n    if (this.port && this.port !== 80) {\n      url += `:${this.port}`;\n    }\n    if (this.path && this.path !== '/') {\n      if (!this.path.startsWith('/')) {\n        path += '/' + this.path;\n      } else {\n        url += this.path;\n      }\n    }\n    if (this.queryString) {\n      url += '?' + this.queryString;\n    }\n    return url;\n  }\n\n}"]}